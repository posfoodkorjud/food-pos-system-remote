#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π POS
‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏Å‡∏±‡∏ö‡πÄ‡∏°‡∏ô‡∏π
"""

import sqlite3
import os
from datetime import datetime
from collections import Counter

def check_menu_health():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    
    db_path = "A_FOOD_POS/FOOD_POS/pos_database.db"
    
    if not os.path.exists(db_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {db_path}")
        return False
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        print("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏°‡∏ô‡∏π...")
        print("="*60)
        
        issues_found = []
        
        # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        cursor.execute("SELECT COUNT(*) FROM menu_categories WHERE is_active = 1")
        category_count = cursor.fetchone()[0]
        
        print(f"üìÇ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {category_count}")
        
        if category_count != 4:
            issues_found.append(f"‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {category_count} (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 4)")
        
        # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π
        cursor.execute("SELECT COUNT(*) FROM menu_items WHERE is_available = 1")
        menu_count = cursor.fetchone()[0]
        
        print(f"üçΩÔ∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡∏≤‡∏¢: {menu_count}")
        
        if menu_count != 77:
            issues_found.append(f"‚ö†Ô∏è ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {menu_count} (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 77)")
        
        # 3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
        cursor.execute("SELECT MIN(price), MAX(price) FROM menu_items WHERE is_available = 1")
        min_price, max_price = cursor.fetchone()
        
        print(f"üí∞ ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {min_price}-{max_price} ‡∏ö‡∏≤‡∏ó")
        
        if min_price < 15 or max_price > 59:
            issues_found.append(f"‚ö†Ô∏è ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î: {min_price}-{max_price} (‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô 15-59)")
        
        # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
        cursor.execute("SELECT name, COUNT(*) FROM menu_items WHERE is_available = 1 GROUP BY name HAVING COUNT(*) > 1")
        duplicate_names = cursor.fetchall()
        
        if duplicate_names:
            print(f"‚ùå ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥: {len(duplicate_names)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            for name, count in duplicate_names:
                print(f"  - '{name}': {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                issues_found.append(f"‚ö†Ô∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥: {name} ({count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥")
        
        # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥
        cursor.execute("SELECT name, COUNT(*) FROM menu_categories WHERE is_active = 1 GROUP BY name HAVING COUNT(*) > 1")
        duplicate_categories = cursor.fetchall()
        
        if duplicate_categories:
            print(f"‚ùå ‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥: {len(duplicate_categories)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            for name, count in duplicate_categories:
                print(f"  - '{name}': {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
                issues_found.append(f"‚ö†Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥: {name} ({count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£)")
        else:
            print("‚úÖ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ã‡πâ‡∏≥")
        
        # 6. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        cursor.execute("""
            SELECT m.name, m.category_id 
            FROM menu_items m 
            LEFT JOIN menu_categories c ON m.category_id = c.category_id 
            WHERE m.is_available = 1 AND (c.category_id IS NULL OR c.is_active = 0)
        """)
        orphan_items = cursor.fetchall()
        
        if orphan_items:
            print(f"‚ùå ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: {len(orphan_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            for name, category_id in orphan_items:
                print(f"  - '{name}' (category_id: {category_id})")
                issues_found.append(f"‚ö†Ô∏è ‡πÄ‡∏°‡∏ô‡∏π‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {name}")
        else:
            print("‚úÖ ‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏°‡∏µ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        # 7. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        cursor.execute("""
            SELECT c.name, COUNT(m.item_id) as item_count
            FROM menu_categories c
            LEFT JOIN menu_items m ON c.category_id = m.category_id AND m.is_available = 1
            WHERE c.is_active = 1
            GROUP BY c.category_id, c.name
            ORDER BY c.name
        """)
        category_distribution = cursor.fetchall()
        
        print(f"\nüìä ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:")
        for cat_name, item_count in category_distribution:
            print(f"  - {cat_name}: {item_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π
            if item_count == 0:
                issues_found.append(f"‚ö†Ô∏è ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà '{cat_name}' ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏°‡∏ô‡∏π")
        
        # 8. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        cursor.execute("SELECT name, price FROM menu_items WHERE is_available = 1 AND (price <= 0 OR price IS NULL)")
        invalid_prices = cursor.fetchall()
        
        if invalid_prices:
            print(f"‚ùå ‡∏û‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {len(invalid_prices)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            for name, price in invalid_prices:
                print(f"  - '{name}': {price} ‡∏ö‡∏≤‡∏ó")
                issues_found.append(f"‚ö†Ô∏è ‡πÄ‡∏°‡∏ô‡∏π‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥: {name} ({price})")
        else:
            print("‚úÖ ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏∏‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        
        conn.close()
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        print("\n" + "="*60)
        
        if not issues_found:
            print("üéâ ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏î‡πÜ ‡πÄ‡∏°‡∏ô‡∏π‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏™‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏î‡∏µ!")
            print(f"‚úÖ ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            print(f"‚úÖ ‡πÄ‡∏°‡∏ô‡∏π: {menu_count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            print(f"‚úÖ ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {min_price}-{max_price} ‡∏ö‡∏≤‡∏ó")
            return True
        else:
            print(f"‚ö†Ô∏è ‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤ {len(issues_found)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:")
            for i, issue in enumerate(issues_found, 1):
                print(f"  {i}. {issue}")
            
            print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
            print("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡∏û‡∏ö")
            print("- ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            print("- ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç")
            return False
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö: {e}")
        return False

def generate_menu_report():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏ô‡∏π‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î"""
    
    db_path = "A_FOOD_POS/FOOD_POS/pos_database.db"
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        report_file = f"menu_health_report_{timestamp}.txt"
        
        with open(report_file, 'w', encoding='utf-8') as f:
            f.write(f"=== ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏°‡∏ô‡∏π POS ===\n")
            f.write(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\n\n")
            
            # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
            cursor.execute("SELECT COUNT(*) FROM menu_categories WHERE is_active = 1")
            category_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT COUNT(*) FROM menu_items WHERE is_available = 1")
            menu_count = cursor.fetchone()[0]
            
            cursor.execute("SELECT MIN(price), MAX(price), AVG(price) FROM menu_items WHERE is_available = 1")
            min_price, max_price, avg_price = cursor.fetchone()
            
            f.write(f"üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ:\n")
            f.write(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà: {category_count}\n")
            f.write(f"- ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π: {menu_count}\n")
            f.write(f"- ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {min_price}-{max_price} ‡∏ö‡∏≤‡∏ó\n")
            f.write(f"- ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg_price:.2f} ‡∏ö‡∏≤‡∏ó\n\n")
            
            # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
            cursor.execute("""
                SELECT c.name, COUNT(m.item_id) as item_count,
                       MIN(m.price) as min_price, MAX(m.price) as max_price
                FROM menu_categories c
                LEFT JOIN menu_items m ON c.category_id = m.category_id AND m.is_available = 1
                WHERE c.is_active = 1
                GROUP BY c.category_id, c.name
                ORDER BY c.name
            """)
            categories = cursor.fetchall()
            
            f.write(f"üìÇ ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:\n")
            for cat_name, item_count, min_price, max_price in categories:
                f.write(f"\n{cat_name}:\n")
                f.write(f"  - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏°‡∏ô‡∏π: {item_count}\n")
                if item_count > 0:
                    f.write(f"  - ‡∏ä‡πà‡∏ß‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤: {min_price}-{max_price} ‡∏ö‡∏≤‡∏ó\n")
                
                # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                cursor.execute("""
                    SELECT m.name, m.price
                    FROM menu_items m
                    JOIN menu_categories c ON m.category_id = c.category_id
                    WHERE c.name = ? AND m.is_available = 1 AND c.is_active = 1
                    ORDER BY m.name
                """, (cat_name,))
                items = cursor.fetchall()
                
                for item_name, price in items:
                    f.write(f"    ‚Ä¢ {item_name}: {price} ‡∏ö‡∏≤‡∏ó\n")
        
        conn.close()
        
        print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {report_file}")
        return report_file
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {e}")
        return None

if __name__ == "__main__":
    print("üè• ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÄ‡∏°‡∏ô‡∏π POS")
    print("="*50)
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    health_status = check_menu_health()
    
    # ‡πÄ‡∏™‡∏ô‡∏≠‡πÉ‡∏´‡πâ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
    if health_status:
        create_report = input("\nüìÑ ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/n): ").lower().strip()
        if create_report == 'y':
            generate_menu_report()
    
    print("\nüí° ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    print("- ‡∏£‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏£‡∏∞‡∏à‡∏≥")
    print("- ‡∏™‡∏£‡πâ‡∏≤‡∏á backup ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π")
    print("- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")