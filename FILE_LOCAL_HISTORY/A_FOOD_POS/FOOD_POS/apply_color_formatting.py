import sqlite3
import json
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime
from collections import defaultdict
import time

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
with open('google_sheets_config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
creds = Credentials.from_service_account_file(
    'credentials.json',
    scopes=['https://www.googleapis.com/auth/spreadsheets']
)
client = gspread.authorize(creds)
sheet = client.open_by_key(config['spreadsheet_id']).worksheet('Orders')

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn = sqlite3.connect('pos_database.db')
cursor = conn.cursor()

print("üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets...")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order IDs ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
cursor.execute('''
    SELECT DISTINCT o.order_id
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    WHERE o.status = 'completed'
    ORDER BY o.order_id DESC
''')

order_ids = [row[0] for row in cursor.fetchall()]
print(f"üìä ‡∏û‡∏ö {len(order_ids)} Orders ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏à‡∏±‡∏î‡∏™‡∏µ")

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order (‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°)
color_sets = [
    # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏™‡πâ‡∏°
    {
        'light': {'red': 1.0, 'green': 0.9, 'blue': 0.8},    # ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
        'dark': {'red': 1.0, 'green': 0.7, 'blue': 0.4}      # ‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°
    },
    # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
    {
        'light': {'red': 0.8, 'green': 1.0, 'blue': 0.8},    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
        'dark': {'red': 0.6, 'green': 0.9, 'blue': 0.6}      # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
    },
    # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤
    {
        'light': {'red': 0.8, 'green': 0.9, 'blue': 1.0},    # ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
        'dark': {'red': 0.6, 'green': 0.8, 'blue': 1.0}      # ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
    },
    # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
    {
        'light': {'red': 0.95, 'green': 0.8, 'blue': 1.0},   # ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
        'dark': {'red': 0.9, 'green': 0.6, 'blue': 1.0}      # ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
    },
    # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
    {
        'light': {'red': 1.0, 'green': 0.9, 'blue': 0.95},   # ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
        'dark': {'red': 1.0, 'green': 0.7, 'blue': 0.8}      # ‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
    },
    # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
    {
        'light': {'red': 1.0, 'green': 1.0, 'blue': 0.8},    # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
        'dark': {'red': 1.0, 'green': 0.9, 'blue': 0.5}      # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°
    }
]

# ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
order_colors = {}
for i, order_id in enumerate(order_ids):
    order_colors[order_id] = color_sets[i % len(color_sets)]

print(f"üéØ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ {len(order_colors)} Orders ‡πÅ‡∏•‡πâ‡∏ß")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheets
all_values = sheet.get_all_values()
print(f"üìã ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets: {len(all_values)} ‡πÅ‡∏ñ‡∏ß")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á batch requests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡∏µ
batch_requests = []
current_order_id = None

for i, row in enumerate(all_values[1:], start=2):  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2 (‡∏Ç‡πâ‡∏≤‡∏° header)
    if len(row) > 0 and row[0]:
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if row[0].startswith('‡∏™‡∏£‡∏∏‡∏õ Order'):
            # ‡πÅ‡∏¢‡∏Å Order ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
            try:
                order_id = int(row[0].replace('‡∏™‡∏£‡∏∏‡∏õ Order ', ''))
                if order_id in order_colors:
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î (‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°)
                    batch_requests.append({
                        'repeatCell': {
                            'range': {
                                'sheetId': sheet.id,
                                'startRowIndex': i-1,
                                'endRowIndex': i,
                                'startColumnIndex': 0,
                                'endColumnIndex': 9
                            },
                            'cell': {
                                'userEnteredFormat': {
                                    'backgroundColor': order_colors[order_id]['dark'],
                                    'textFormat': {
                                        'bold': True,
                                        'fontSize': 11
                                    },
                                    'horizontalAlignment': 'CENTER'
                                }
                            },
                            'fields': 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment)'
                        }
                    })
            except ValueError:
                pass
        else:
            # ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏î‡∏∂‡∏á Order ID ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
            try:
                order_id = int(row[0])
                current_order_id = order_id
                if order_id in order_colors:
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô)
                    batch_requests.append({
                        'repeatCell': {
                            'range': {
                                'sheetId': sheet.id,
                                'startRowIndex': i-1,
                                'endRowIndex': i,
                                'startColumnIndex': 0,
                                'endColumnIndex': 9
                            },
                            'cell': {
                                'userEnteredFormat': {
                                    'backgroundColor': order_colors[order_id]['light']
                                }
                            },
                            'fields': 'userEnteredFormat.backgroundColor'
                        }
                    })
            except ValueError:
                # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Order ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                if current_order_id and current_order_id in order_colors:
                    batch_requests.append({
                        'repeatCell': {
                            'range': {
                                'sheetId': sheet.id,
                                'startRowIndex': i-1,
                                'endRowIndex': i,
                                'startColumnIndex': 0,
                                'endColumnIndex': 9
                            },
                            'cell': {
                                'userEnteredFormat': {
                                    'backgroundColor': order_colors[current_order_id]['light']
                                }
                            },
                            'fields': 'userEnteredFormat.backgroundColor'
                        }
                    })

print(f"üîß ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° batch requests: {len(batch_requests)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ‡∏™‡πà‡∏á batch requests ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ö‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á quota limit
batch_size = 50  # ‡∏•‡∏î‡∏Ç‡∏ô‡∏≤‡∏î batch ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á quota limit
total_batches = (len(batch_requests) + batch_size - 1) // batch_size

for i in range(0, len(batch_requests), batch_size):
    batch = batch_requests[i:i+batch_size]
    batch_num = (i // batch_size) + 1
    
    print(f"üì§ ‡∏™‡πà‡∏á batch {batch_num}/{total_batches} ({len(batch)} requests)...")
    
    try:
        sheet.spreadsheet.batch_update({'requests': batch})
        print(f"‚úÖ Batch {batch_num} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
        
        # ‡∏£‡∏≠‡∏™‡∏±‡∏Å‡∏Ñ‡∏£‡∏π‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit
        if i + batch_size < len(batch_requests):
            print("‚è≥ ‡∏£‡∏≠ 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á rate limit...")
            time.sleep(2)
            
    except Exception as e:
        print(f"‚ö†Ô∏è Batch {batch_num} ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        # ‡∏£‡∏≠‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        print("‚è≥ ‡∏£‡∏≠ 10 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà...")
        time.sleep(10)

conn.close()
print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
print("üé® ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order ID ‡∏à‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô:")
print("   - ‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤")
print("   - ‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î")
print("   - ‡πÉ‡∏ä‡πâ 6 ‡∏ä‡∏∏‡∏î‡∏™‡∏µ (‡∏™‡πâ‡∏°, ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß, ‡∏ü‡πâ‡∏≤, ‡∏°‡πà‡∏ß‡∏á, ‡∏ä‡∏°‡∏û‡∏π, ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á) ‡∏´‡∏°‡∏∏‡∏ô‡πÄ‡∏ß‡∏µ‡∏¢‡∏ô‡∏Å‡∏±‡∏ô")