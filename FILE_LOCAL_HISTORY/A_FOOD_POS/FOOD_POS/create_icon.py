#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Food POS System - Icon Creator
‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå executable
"""

import os
from PIL import Image, ImageDraw, ImageFont
import io

def create_icon():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Food POS System
    """
    try:
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏†‡∏≤‡∏û‡∏Ç‡∏ô‡∏≤‡∏î 256x256 (‡∏Ç‡∏ô‡∏≤‡∏î‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ICO)
        size = 256
        img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        draw = ImageDraw.Draw(img)
        
        # ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á (gradient ‡∏à‡∏≤‡∏Å‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡πÑ‡∏õ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô)
        for y in range(size):
            color_ratio = y / size
            r = int(255 * (0.9 - color_ratio * 0.3))  # ‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏° -> ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
            g = int(140 * (0.9 - color_ratio * 0.2))  # 
            b = int(0 * (1 - color_ratio * 0.1))      # 
            for x in range(size):
                img.putpixel((x, y), (r, g, b, 255))
        
        # ‡∏ß‡∏≤‡∏î‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
        circle_margin = 20
        circle_bbox = [circle_margin, circle_margin, size - circle_margin, size - circle_margin]
        draw.ellipse(circle_bbox, fill=(255, 165, 0, 255), outline=(255, 140, 0, 255), width=4)
        
        # ‡∏ß‡∏≤‡∏î‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏à‡∏≤‡∏ô (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÉ‡∏´‡∏ç‡πà)
        plate_margin = 60
        plate_bbox = [plate_margin, plate_margin, size - plate_margin, size - plate_margin]
        draw.ellipse(plate_bbox, fill=(255, 255, 255, 255), outline=(200, 200, 200, 255), width=3)
        
        # ‡∏ß‡∏≤‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ö‡∏ô‡∏à‡∏≤‡∏ô (‡∏ß‡∏á‡∏Å‡∏•‡∏°‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡∏´‡∏•‡∏≤‡∏¢‡∏ß‡∏á)
        food_colors = [
            (255, 100, 100, 255),  # ‡πÅ‡∏î‡∏á (‡∏°‡∏∞‡πÄ‡∏Ç‡∏∑‡∏≠‡πÄ‡∏ó‡∏®)
            (100, 255, 100, 255),  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß (‡∏ú‡∏±‡∏Å)
            (255, 255, 100, 255),  # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á (‡∏Ç‡πâ‡∏≤‡∏ß)
            (150, 100, 50, 255),   # ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (‡πÄ‡∏ô‡∏∑‡πâ‡∏≠)
        ]
        
        # ‡∏ß‡∏≤‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
        import random
        random.seed(42)  # ‡πÉ‡∏ä‡πâ seed ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÑ‡∏î‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
        
        for i in range(8):
            food_size = random.randint(15, 25)
            x = random.randint(plate_margin + 20, size - plate_margin - 20 - food_size)
            y = random.randint(plate_margin + 20, size - plate_margin - 20 - food_size)
            color = random.choice(food_colors)
            
            draw.ellipse([x, y, x + food_size, y + food_size], fill=color)
        
        # ‡∏ß‡∏≤‡∏î‡∏™‡πâ‡∏≠‡∏°‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏î (‡πÄ‡∏™‡πâ‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÜ)
        fork_x = size - 80
        fork_y = 80
        
        # ‡∏™‡πâ‡∏≠‡∏°
        draw.line([fork_x, fork_y, fork_x, fork_y + 60], fill=(150, 150, 150, 255), width=4)
        for i in range(3):
            draw.line([fork_x - 6 + i * 6, fork_y, fork_x - 6 + i * 6, fork_y + 15], 
                     fill=(150, 150, 150, 255), width=2)
        
        # ‡∏°‡∏µ‡∏î
        knife_x = fork_x + 20
        knife_y = fork_y
        draw.line([knife_x, knife_y, knife_x, knife_y + 60], fill=(150, 150, 150, 255), width=4)
        draw.polygon([(knife_x - 8, knife_y), (knife_x + 8, knife_y), (knife_x, knife_y + 20)], 
                    fill=(200, 200, 200, 255))
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏≤
        shadow_img = Image.new('RGBA', (size, size), (0, 0, 0, 0))
        shadow_draw = ImageDraw.Draw(shadow_img)
        
        # ‡πÄ‡∏á‡∏≤‡∏Ç‡∏≠‡∏á‡∏ß‡∏á‡∏Å‡∏•‡∏°‡∏´‡∏•‡∏±‡∏Å
        shadow_offset = 8
        shadow_circle = [circle_margin + shadow_offset, circle_margin + shadow_offset, 
                        size - circle_margin + shadow_offset, size - circle_margin + shadow_offset]
        shadow_draw.ellipse(shadow_circle, fill=(0, 0, 0, 50))
        
        # ‡∏£‡∏ß‡∏°‡πÄ‡∏á‡∏≤‡∏Å‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏´‡∏•‡∏±‡∏Å
        img = Image.alpha_composite(shadow_img, img)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå ICO
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏´‡∏•‡∏≤‡∏¢‡∏Ç‡∏ô‡∏≤‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ICO file
        sizes = [16, 32, 48, 64, 128, 256]
        icon_images = []
        
        for icon_size in sizes:
            resized = img.resize((icon_size, icon_size), Image.Resampling.LANCZOS)
            icon_images.append(resized)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô ICO
        icon_images[0].save('icon.ico', format='ICO', sizes=[(s, s) for s in sizes])
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô PNG ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á
        img.save('icon_preview.png', format='PNG')
        
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        print("   - icon.ico (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö executable)")
        print("   - icon_preview.png (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏π‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á)")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô: {e}")
        return False

def create_simple_icon():
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢ (fallback)
    """
    try:
        size = 256
        img = Image.new('RGBA', (size, size), (255, 165, 0, 255))  # ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡∏™‡∏µ‡∏™‡πâ‡∏°
        draw = ImageDraw.Draw(img)
        
        # ‡∏ß‡∏≤‡∏î‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£ POS
        try:
            # ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡∏£‡∏∞‡∏ö‡∏ö
            font_size = 80
            font = ImageFont.truetype("arial.ttf", font_size)
        except:
            # ‡πÉ‡∏ä‡πâ‡∏ü‡∏≠‡∏ô‡∏ï‡πå‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
            font = ImageFont.load_default()
        
        # ‡∏ß‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° POS
        text = "POS"
        bbox = draw.textbbox((0, 0), text, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]
        
        x = (size - text_width) // 2
        y = (size - text_height) // 2
        
        # ‡πÄ‡∏á‡∏≤‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        draw.text((x + 3, y + 3), text, font=font, fill=(0, 0, 0, 128))
        # ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å
        draw.text((x, y), text, font=font, fill=(255, 255, 255, 255))
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö
        draw.rectangle([10, 10, size-10, size-10], outline=(255, 140, 0, 255), width=8)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏õ‡πá‡∏ô ICO
        sizes = [16, 32, 48, 64, 128, 256]
        icon_images = []
        
        for icon_size in sizes:
            resized = img.resize((icon_size, icon_size), Image.Resampling.LANCZOS)
            icon_images.append(resized)
        
        icon_images[0].save('icon.ico', format='ICO', sizes=[(s, s) for s in sizes])
        img.save('icon_preview.png', format='PNG')
        
        print("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!")
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢: {e}")
        return False

def main():
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å
    """
    print("üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Food POS System...")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Pillow
    try:
        from PIL import Image
        print("‚úÖ ‡∏û‡∏ö Pillow library")
    except ImportError:
        print("‚ö†Ô∏è  ‡πÑ‡∏°‡πà‡∏û‡∏ö Pillow library ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á...")
        import subprocess
        import sys
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", "Pillow"])
            print("‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Pillow ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß")
        except:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á Pillow ‡πÑ‡∏î‡πâ")
            return False
    
    # ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
    if not create_icon():
        print("‚ö†Ô∏è  ‡∏•‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢...")
        if not create_simple_icon():
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ")
            return False
    
    return True

if __name__ == "__main__":
    if main():
        print("\nüéâ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå!")
    else:
        print("\n‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡πÑ‡∏î‡πâ")
    
    input("‡∏Å‡∏î Enter ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å...")