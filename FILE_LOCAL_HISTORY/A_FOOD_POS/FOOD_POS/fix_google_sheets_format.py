#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import json
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
with open('google_sheets_config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
creds = Credentials.from_service_account_file(
    'credentials.json',
    scopes=['https://www.googleapis.com/auth/spreadsheets']
)
client = gspread.authorize(creds)
sheet = client.open_by_key(config['spreadsheet_id']).worksheet('Orders')

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn = sqlite3.connect('pos_database.db')
cursor = conn.cursor()

print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets...")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
header = [
    'Order ID',
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤', 
    '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢',
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°',
    '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
    '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
]

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
cursor.execute('''
    SELECT o.order_id, o.created_at as order_date, mi.name, oi.quantity, 
           oi.unit_price, oi.total_price, oi.customer_request, oi.status
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN menu_items mi ON oi.item_id = mi.item_id
    WHERE o.status = 'completed'
    ORDER BY o.order_id, oi.created_at
''')

all_items = cursor.fetchall()
print(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
formatted_data = [header]

for item in all_items:
    order_id = str(item[0])
    order_date = datetime.strptime(item[1], '%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y %H:%M:%S')
    item_name = item[2]
    quantity = str(item[3])
    unit_price = str(int(item[4]))  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
    total_price = str(int(item[5]))  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    customer_request = item[6] or ''  # ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©
    notes = customer_request  # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡πÉ‡∏ä‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©)
    status = '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' if item[7] == 'completed' else item[7]
    
    new_row = [
        order_id,
        order_date, 
        item_name,
        quantity,
        unit_price,
        total_price,
        customer_request,
        notes,
        status
    ]
    
    formatted_data.append(new_row)

# ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
print("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
sheet.clear()

print("üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...")
if formatted_data:
    sheet.update(range_name='A1', values=formatted_data)

# ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header
print("üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö header...")
try:
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ header ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤
    sheet.format('A1:I1', {
        'textFormat': {'bold': True},
        'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 0.9},
        'horizontalAlignment': 'CENTER'
    })
    
    # ‡∏à‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå
    sheet.format('A:A', {'columnWidth': 80})   # Order ID
    sheet.format('B:B', {'columnWidth': 150})  # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤
    sheet.format('C:C', {'columnWidth': 200})  # ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
    sheet.format('D:D', {'columnWidth': 80})   # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
    sheet.format('E:E', {'columnWidth': 100})  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
    sheet.format('F:F', {'columnWidth': 100})  # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
    sheet.format('G:G', {'columnWidth': 150})  # ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©
    sheet.format('H:H', {'columnWidth': 150})  # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
    sheet.format('I:I', {'columnWidth': 100})  # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    
    print("‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
except Exception as e:
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {e}")

# ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
print(f"\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
print(f"   üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(formatted_data)-1} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° header)")

# ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
order_counts = {}
for item in all_items:
    order_id = item[0]
    order_counts[order_id] = order_counts.get(order_id, 0) + 1

print(f"   üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Order: {len(order_counts)} orders")
for order_id, count in sorted(order_counts.items()):
    total = sum(item[5] for item in all_items if item[0] == order_id)
    print(f"      Order {order_id}: {count} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏£‡∏ß‡∏° {int(total)} ‡∏ö‡∏≤‡∏ó")

conn.close()
print("\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")