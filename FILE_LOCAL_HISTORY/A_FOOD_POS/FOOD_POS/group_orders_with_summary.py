#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import sqlite3
import json
from google.oauth2.service_account import Credentials
import gspread
from datetime import datetime
from collections import defaultdict

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
with open('google_sheets_config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
creds = Credentials.from_service_account_file(
    'credentials.json',
    scopes=['https://www.googleapis.com/auth/spreadsheets']
)
client = gspread.authorize(creds)
sheet = client.open_by_key(config['spreadsheet_id']).worksheet('Orders')

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn = sqlite3.connect('pos_database.db')
cursor = conn.cursor()

print("üîß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Order ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î...")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡∏ó‡∏µ‡πà‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
header = [
    'Order ID',
    '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤', 
    '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
    '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
    '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)',
    '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©',
    '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
    '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
]

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° Order ID (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤) ‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤
cursor.execute('''
    SELECT o.order_id, o.created_at as order_date, mi.name, oi.quantity, 
           oi.unit_price, oi.total_price, oi.customer_request, oi.status,
           oi.created_at as item_created_at
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    JOIN menu_items mi ON oi.item_id = mi.item_id
    WHERE o.status = 'completed'
    ORDER BY o.order_id DESC, oi.created_at ASC
''')

all_items = cursor.fetchall()
print(f"üìä ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")

# ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Order ID
orders_grouped = defaultdict(list)
for item in all_items:
    order_id = item[0]
    orders_grouped[order_id].append(item)

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß
formatted_data = [header]

# ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö Order ID ‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤
for order_id in sorted(orders_grouped.keys(), reverse=True):
    items = orders_grouped[order_id]
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
    total_quantity = 0
    total_amount = 0
    
    for item in items:
        order_date = datetime.strptime(item[1], '%Y-%m-%d %H:%M:%S').strftime('%d/%m/%Y %H:%M:%S')
        item_name = item[2]
        quantity = item[3]
        unit_price = int(item[4])
        item_total = int(item[5])
        customer_request = item[6] or ''
        status = '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô'
        
        # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å customer_request
        special_request_text = '-'
        notes_text = '-'
        spice_level = None
        
        if customer_request and customer_request.strip():
            # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° | ‡∏Å‡πà‡∏≠‡∏ô
            parts = customer_request.split('|')
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î/‡∏´‡∏ß‡∏≤‡∏ô
            spice_patterns = ['‡∏´‡∏ß‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥', '‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢', '‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å', '‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢', '‡πÄ‡∏ú‡πá‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', '‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å', '‡πÄ‡∏ú‡πá‡∏î‡∏û‡∏¥‡πÄ‡∏®‡∏©', '‡πÑ‡∏°‡πà‡πÄ‡∏ú‡πá‡∏î', '‡∏õ‡∏Å‡∏ï‡∏¥']
            special_requests = []
            other_notes = []
            
            for part in parts:
                part = part.strip()
                if not part:
                    continue
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î/‡∏´‡∏ß‡∏≤‡∏ô
                is_spice = False
                for pattern in spice_patterns:
                    if part == pattern or pattern in part:
                        if not spice_level:  # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î/‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
                            spice_level = pattern
                        is_spice = True
                        break
                
                if is_spice:
                    continue
                    
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏© (‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß, ‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß, ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏ß)
                special_keywords = ['‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß', '‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß', '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏ß', '‡πÄ‡∏û‡∏¥‡πà‡∏° ‡∏Ç‡πâ‡∏≤‡∏ß']
                
                # ‡πÅ‡∏¢‡∏Å‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡πà‡∏ß‡∏ô
                sub_parts = part.split(',')
                for sub_part in sub_parts:
                    sub_part = sub_part.strip()
                    if not sub_part:
                        continue
                        
                    is_special = False
                    for keyword in special_keywords:
                        if keyword in sub_part:
                            special_requests.append(sub_part)
                            is_special = True
                            break
                    
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î/‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà "‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°" ‡πÉ‡∏´‡πâ‡πÉ‡∏™‡πà‡πÉ‡∏ô‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
                    if not is_special and sub_part not in ['‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°', '‡∏õ‡∏Å‡∏ï‡∏¥'] and not any(spice in sub_part for spice in spice_patterns):
                        other_notes.append(sub_part)
            
            special_request_text = ', '.join(special_requests) if special_requests else '-'
            notes_text = ', '.join(other_notes) if other_notes else '-'
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î‡πÉ‡∏ô‡∏ß‡∏á‡πÄ‡∏•‡πá‡∏ö‡∏´‡∏•‡∏±‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        if spice_level:
            item_name = f"{item_name} ({spice_level})"
        
        new_row = [
            str(order_id),
            order_date, 
            item_name,
            str(quantity),
            str(unit_price),
            str(item_total),
            special_request_text,
            notes_text,
            status
        ]
        
        formatted_data.append(new_row)
        total_quantity += quantity
        total_amount += item_total
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
    summary_row = [
        f"‡∏™‡∏£‡∏∏‡∏õ Order {order_id}",
        "",
        f"‡∏£‡∏ß‡∏° {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        str(total_quantity),
        "",
        f"{total_amount:,}",
        "",
        "",
        "‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î"
    ]
    formatted_data.append(summary_row)
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
    empty_row = ["", "", "", "", "", "", "", "", ""]
    formatted_data.append(empty_row)

# ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
if formatted_data and all(cell == "" for cell in formatted_data[-1]):
    formatted_data.pop()

# ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
print("üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î...")
sheet.clear()

# ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
print("üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß...")
if formatted_data:
    sheet.update(range_name='A1', values=formatted_data)

# ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°
print("üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°...")
try:
    # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ header ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏´‡∏ô‡∏≤‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á
    sheet.format('A1:I1', {
        'textFormat': {
            'bold': True,
            'fontSize': 12
        },
        'backgroundColor': {
            'red': 0.2, 
            'green': 0.6, 
            'blue': 0.9
        },
        'horizontalAlignment': 'CENTER',
        'verticalAlignment': 'MIDDLE'
    })
    
    # ‡∏à‡∏±‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (‡πÉ‡∏ä‡πâ batch_update ‡πÅ‡∏ó‡∏ô)
    requests = []
    column_widths = [
        ('A', 120),   # Order ID
        ('B', 160),   # ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤
        ('C', 250),   # ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        ('D', 80),    # ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô
        ('E', 120),   # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢
        ('F', 120),   # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°
        ('G', 180),   # ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©
        ('H', 180),   # ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
        ('I', 100)    # ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    ]
    
    for col, width in column_widths:
        col_index = ord(col) - ord('A')
        requests.append({
            'updateDimensionProperties': {
                'range': {
                    'sheetId': sheet.id,
                    'dimension': 'COLUMNS',
                    'startIndex': col_index,
                    'endIndex': col_index + 1
                },
                'properties': {
                    'pixelSize': width
                },
                'fields': 'pixelSize'
            }
        })
    
    if requests:
        sheet.spreadsheet.batch_update({'requests': requests})
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order (‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°)
    color_sets = [
        # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏™‡πâ‡∏°
        {
            'light': {'red': 1.0, 'green': 0.9, 'blue': 0.8},    # ‡∏™‡πâ‡∏°‡∏≠‡πà‡∏≠‡∏ô
            'dark': {'red': 1.0, 'green': 0.7, 'blue': 0.4}      # ‡∏™‡πâ‡∏°‡πÄ‡∏Ç‡πâ‡∏°
        },
        # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        {
            'light': {'red': 0.8, 'green': 1.0, 'blue': 0.8},    # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô
            'dark': {'red': 0.6, 'green': 0.9, 'blue': 0.6}      # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°
        },
        # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏ü‡πâ‡∏≤
        {
            'light': {'red': 0.8, 'green': 0.9, 'blue': 1.0},    # ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
            'dark': {'red': 0.6, 'green': 0.8, 'blue': 1.0}      # ‡∏ü‡πâ‡∏≤‡πÄ‡∏Ç‡πâ‡∏°
        },
        # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏°‡πà‡∏ß‡∏á
        {
            'light': {'red': 0.95, 'green': 0.8, 'blue': 1.0},   # ‡∏°‡πà‡∏ß‡∏á‡∏≠‡πà‡∏≠‡∏ô
            'dark': {'red': 0.9, 'green': 0.6, 'blue': 1.0}      # ‡∏°‡πà‡∏ß‡∏á‡πÄ‡∏Ç‡πâ‡∏°
        },
        # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡∏ä‡∏°‡∏û‡∏π
        {
            'light': {'red': 1.0, 'green': 0.9, 'blue': 0.95},   # ‡∏ä‡∏°‡∏û‡∏π‡∏≠‡πà‡∏≠‡∏ô
            'dark': {'red': 1.0, 'green': 0.7, 'blue': 0.8}      # ‡∏ä‡∏°‡∏û‡∏π‡πÄ‡∏Ç‡πâ‡∏°
        },
        # ‡∏ä‡∏∏‡∏î‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        {
            'light': {'red': 1.0, 'green': 1.0, 'blue': 0.8},    # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡∏≠‡πà‡∏≠‡∏ô
            'dark': {'red': 1.0, 'green': 0.9, 'blue': 0.5}      # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏°
        }
    ]
    
    # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏™‡∏µ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
    order_colors = {}
    color_index = 0
    
    # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° Order ID ‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢)
    sorted_orders = sorted(orders_grouped.keys(), reverse=True)
    for order_id in sorted_orders:
        order_colors[order_id] = color_sets[color_index % len(color_sets)]
        color_index += 1
    
    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
    current_order_id = None
    for i, row in enumerate(formatted_data[1:], start=2):  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏ñ‡∏ß 2 (‡∏Ç‡πâ‡∏≤‡∏° header)
        if len(row) > 0:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if row[0].startswith('‡∏™‡∏£‡∏∏‡∏õ Order'):
                # ‡πÅ‡∏¢‡∏Å Order ID ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏£‡∏∏‡∏õ
                order_id = int(row[0].replace('‡∏™‡∏£‡∏∏‡∏õ Order ', ''))
                if order_id in order_colors:
                    # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î (‡∏™‡∏µ‡πÄ‡∏Ç‡πâ‡∏°)
                    sheet.format(f'A{i}:I{i}', {
                        'textFormat': {
                            'bold': True,
                            'fontSize': 11
                        },
                        'backgroundColor': order_colors[order_id]['dark'],
                        'horizontalAlignment': 'CENTER'
                    })
            elif row[0] and row[0] != "":
                # ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ - ‡∏î‡∏∂‡∏á Order ID ‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÅ‡∏£‡∏Å
                try:
                    order_id = int(row[0])
                    current_order_id = order_id
                    if order_id in order_colors:
                        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏™‡∏µ‡∏≠‡πà‡∏≠‡∏ô)
                        sheet.format(f'A{i}:I{i}', {
                            'backgroundColor': order_colors[order_id]['light']
                        })
                except ValueError:
                    # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô int ‡πÑ‡∏î‡πâ ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏Ç‡∏≠‡∏á Order ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                    if current_order_id and current_order_id in order_colors:
                        sheet.format(f'A{i}:I{i}', {
                            'backgroundColor': order_colors[current_order_id]['light']
                        })
    
    # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    if len(formatted_data) > 1:
        data_range = f'A2:I{len(formatted_data)}'
        sheet.format(data_range, {
            'horizontalAlignment': 'LEFT',
            'verticalAlignment': 'MIDDLE'
        })
        
        # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏•‡∏≤‡∏á
        sheet.format(f'D2:F{len(formatted_data)}', {
            'horizontalAlignment': 'CENTER'
        })
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ç‡∏≠‡∏ö
    if len(formatted_data) > 1:
        sheet.format(f'A1:I{len(formatted_data)}', {
            'borders': {
                'top': {'style': 'SOLID'},
                'bottom': {'style': 'SOLID'},
                'left': {'style': 'SOLID'},
                'right': {'style': 'SOLID'}
            }
        })
    
    print("‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
except Exception as e:
    print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏î‡πâ: {e}")

# ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
print(f"\nüìã ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:")
print(f"   üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
print(f"   üì¶ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Orders: {len(orders_grouped)} orders")

# ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤)
print(f"\nüìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤):")
for order_id in sorted(orders_grouped.keys(), reverse=True):
    items = orders_grouped[order_id]
    total_amount = sum(item[5] for item in items)
    total_quantity = sum(item[3] for item in items)
    print(f"   Order {order_id}: {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏° {total_quantity} ‡∏ä‡∏¥‡πâ‡∏ô, ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° {int(total_amount):,} ‡∏ö‡∏≤‡∏ó")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Order 170 ‡πÇ‡∏î‡∏¢‡πÄ‡∏â‡∏û‡∏≤‡∏∞
if 170 in orders_grouped:
    order_170_items = orders_grouped[170]
    print(f"\nüéØ Order 170 ‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:")
    for i, item in enumerate(order_170_items, 1):
        print(f"   {i}. {item[2]} - ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: {item[3]}, ‡∏£‡∏≤‡∏Ñ‡∏≤: {int(item[5])} ‡∏ö‡∏≤‡∏ó")
    
    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ "‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏≤‡∏∞+‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏á‡∏≤‡∏∞" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    has_rambutan = any('‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏≤‡∏∞+‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏á‡∏≤‡∏∞' in item[2] for item in order_170_items)
    print(f"   ‚úÖ ‡∏°‡∏µ '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏≤‡∏∞+‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏á‡∏≤‡∏∞': {'‡πÉ‡∏ä‡πà' if has_rambutan else '‡πÑ‡∏°‡πà'}")

conn.close()
print(f"\n‚úÖ ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Order ID ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡πÅ‡∏•‡πâ‡∏ß!")
print(f"üì± ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏° Order ID (‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏õ‡πÄ‡∏Å‡πà‡∏≤) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÉ‡∏ï‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°")