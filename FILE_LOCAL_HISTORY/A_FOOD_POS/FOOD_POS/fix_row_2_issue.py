#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import gspread
from google.oauth2.service_account import Credentials
import json
import sqlite3
from datetime import datetime

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
with open('google_sheets_config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
creds = Credentials.from_service_account_file(
    'credentials.json',
    scopes=['https://www.googleapis.com/auth/spreadsheets']
)
client = gspread.authorize(creds)
sheet = client.open_by_key(config['spreadsheet_id']).worksheet('Orders')

print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2...")

# ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
data = sheet.get_all_values()
header = data[0] if data else []

print(f"Header: {header}")
print(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 (‡∏õ‡∏±‡∏ç‡∏´‡∏≤): {data[1] if len(data) > 1 else '‡πÑ‡∏°‡πà‡∏°‡∏µ'}")

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order 171 ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
conn = sqlite3.connect('pos_database.db')
cursor = conn.cursor()

cursor.execute('''
    SELECT o.order_id, o.table_id, o.session_id, o.status, o.total_amount, 
           o.created_at, o.completed_at
    FROM orders o
    WHERE o.order_id = 171
''')

order_data = cursor.fetchone()
print(f"\nüìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Order 171 ‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
print(f"   Order ID: {order_data[0]}")
print(f"   Table ID: {order_data[1]}")
print(f"   Session ID: {order_data[2]}")
print(f"   Status: {order_data[3]}")
print(f"   Total Amount: {order_data[4]}")
print(f"   Created At: {order_data[5]}")
print(f"   Completed At: {order_data[6]}")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order 171
def format_datetime(dt_str):
    if not dt_str:
        return '', ''
    try:
        dt = datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S')
        date_part = dt.strftime('%Y-%m-%d')
        time_part = dt.strftime('%H:%M:%S')
        return date_part, time_part
    except:
        return '', ''

def calculate_duration(created_at, completed_at):
    if not created_at or not completed_at:
        return ''
    try:
        created = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
        completed = datetime.strptime(completed_at, '%Y-%m-%d %H:%M:%S')
        duration = completed - created
        minutes = int(duration.total_seconds() / 60)
        return str(minutes)
    except:
        return ''

# ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
created_date, created_time = format_datetime(order_data[5])
completed_date, completed_time = format_datetime(order_data[6])
duration = calculate_duration(order_data[5], order_data[6])

correct_row = [
    str(order_data[0]),  # Order ID
    f"‡πÇ‡∏ï‡πä‡∏∞ {order_data[1]}",  # Table Number
    order_data[2] or '',  # Session ID
    '‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô' if order_data[3] == 'completed' else order_data[3],  # Status
    str(order_data[4]),  # Total Amount
    '‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î',  # Payment Method (default)
    '2',  # Customer Count (default)
    'Dine-in',  # Order Type (default)
    created_date,  # Created Date
    created_time,  # Created Time
    completed_date,  # Completed Date
    completed_time,  # Completed Time
    duration,  # Duration
    datetime.now().strftime('%Y-%m-%d %H:%M:%S')  # Updated At
]

print(f"\n‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Order 171:")
for i, (col, val) in enumerate(zip(header, correct_row)):
    print(f"   {col}: {val}")

# ‡∏•‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
print(f"\nüîß ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2...")

# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2
new_data = [header]  # ‡πÄ‡∏Å‡πá‡∏ö header
new_data.append(correct_row)  # ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡∏ô‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2

# ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ñ‡∏ß‡∏≠‡∏∑‡πà‡∏ô‡πÜ (‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤)
for i in range(2, len(data)):
    new_data.append(data[i])

# ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï Google Sheets
sheet.clear()
if new_data:
    sheet.update(range_name='A1', values=new_data)

print(f"\n‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
print(f"üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(new_data)-1} ‡πÅ‡∏ñ‡∏ß (‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° header)")
print(f"üîó ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà: {config.get('spreadsheet_url', 'Google Sheets')}")

conn.close()