#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets ‡πÅ‡∏ö‡∏ö optimized ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î API calls
"""

import sqlite3
import json
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
from datetime import datetime
from collections import defaultdict

def format_sheets_optimized():
    """
    ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets ‡πÅ‡∏ö‡∏ö optimized ‡∏î‡πâ‡∏ß‡∏¢ batch requests
    """
    try:
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
        with open('google_sheets_config.json', 'r', encoding='utf-8') as f:
            config = json.load(f)
        
        if not config.get('enabled', False):
            print("‚ùå Google Sheets ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô")
            return False
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets API
        SCOPES = ['https://www.googleapis.com/auth/spreadsheets']
        credentials = Credentials.from_service_account_file(
            'credentials.json', scopes=SCOPES)
        service = build('sheets', 'v4', credentials=credentials)
        
        spreadsheet_id = config['spreadsheet_id']
        
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤...")
        
        # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        conn = sqlite3.connect('pos_database.db')
        cursor = conn.cursor()
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÑ‡∏°‡πà‡∏Å‡∏£‡∏≠‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞)
        cursor.execute('''
            SELECT o.order_id, o.table_id, o.created_at, o.total_amount, o.status, o.completed_at,
                   mi.name, oi.quantity, oi.unit_price, oi.total_price, oi.customer_request
            FROM orders o
            JOIN order_items oi ON o.order_id = oi.order_id
            JOIN menu_items mi ON oi.item_id = mi.item_id
            ORDER BY o.order_id DESC, oi.created_at ASC
        ''')
        
        all_items = cursor.fetchall()
        conn.close()
        
        if not all_items:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
            return False
        
        # ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° Order ID
        orders_grouped = defaultdict(list)
        for item in all_items:
            order_id = item[0]
            orders_grouped[order_id].append(item)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á header ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û
        header = [
            'Order ID',
            '‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà-‡πÄ‡∏ß‡∏•‡∏≤', 
            '‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤',
            '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô',
            '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢ (‡∏ö‡∏≤‡∏ó)',
            '‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)',
            '‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©',
            '‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏',
            '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞'
        ]
        
        # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Google Sheets
        formatted_data = [header]
        
        # ‡∏™‡∏µ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order (‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û)
        colors = [
            {'light': {'red': 1.0, 'green': 0.9, 'blue': 0.8}, 'dark': {'red': 1.0, 'green': 0.7, 'blue': 0.4}},  # ‡∏™‡πâ‡∏°
            {'light': {'red': 0.8, 'green': 1.0, 'blue': 0.8}, 'dark': {'red': 0.6, 'green': 0.9, 'blue': 0.6}},  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
            {'light': {'red': 0.8, 'green': 0.9, 'blue': 1.0}, 'dark': {'red': 0.6, 'green': 0.8, 'blue': 1.0}},  # ‡∏ü‡πâ‡∏≤
            {'light': {'red': 0.95, 'green': 0.8, 'blue': 1.0}, 'dark': {'red': 0.9, 'green': 0.6, 'blue': 1.0}}, # ‡∏°‡πà‡∏ß‡∏á
            {'light': {'red': 1.0, 'green': 0.9, 'blue': 0.95}, 'dark': {'red': 1.0, 'green': 0.7, 'blue': 0.8}}, # ‡∏ä‡∏°‡∏û‡∏π
            {'light': {'red': 1.0, 'green': 1.0, 'blue': 0.8}, 'dark': {'red': 1.0, 'green': 0.9, 'blue': 0.5}}   # ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á
        ]
        
        # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÉ‡∏´‡πâ‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
        order_colors = {}
        color_index = 0
        sorted_orders = sorted(orders_grouped.keys(), reverse=True)
        
        for order_id in sorted_orders:
            order_colors[order_id] = colors[color_index % len(colors)]
            color_index += 1
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        format_requests = []
        row_formats = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞ Order
        for order_id in sorted_orders:
            items = orders_grouped[order_id]
            total_quantity = 0
            total_amount = 0
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
            for item in items:
                order_id, table_id, created_at, order_total, status, completed_at, item_name, quantity, unit_price, item_total, customer_request = item
                
                # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà
                try:
                    if completed_at:
                        dt = datetime.strptime(completed_at, '%Y-%m-%d %H:%M:%S')
                    else:
                        dt = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S')
                    formatted_date = dt.strftime('%d/%m/%Y %H:%M:%S')
                except:
                    formatted_date = created_at or ''
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                # --- Custom logic for columns ---
                # Extract spiciness/sweetness from customer_request if present
                extra_note = ""
                special_request = customer_request or "-"
                customer_note = "-"
                display_item_name = item_name or ""
                # Example keywords for spiciness/sweetness
                if customer_request:
                    if "‡πÄ‡∏ú‡πá‡∏î" in customer_request:
                        extra_note = "‡πÄ‡∏ú‡πá‡∏î"
                    if "‡∏´‡∏ß‡∏≤‡∏ô" in customer_request:
                        extra_note = extra_note + (" " if extra_note else "") + "‡∏´‡∏ß‡∏≤‡∏ô"
                    # If customer left a note like '‡πÑ‡∏°‡πà‡∏ú‡∏±‡∏Å', put in ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏
                    if "‡πÑ‡∏°‡πà‡∏ú‡∏±‡∏Å" in customer_request:
                        customer_note = "‡πÑ‡∏°‡πà‡∏ú‡∏±‡∏Å"
                    # If request is extra egg/rice, put in ‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©
                    if any(x in customer_request for x in ["‡πÑ‡∏Ç‡πà‡∏î‡∏≤‡∏ß", "‡πÑ‡∏Ç‡πà‡πÄ‡∏à‡∏µ‡∏¢‡∏ß", "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≤‡∏ß"]):
                        special_request = customer_request
                # Append spiciness/sweetness to item name
                if extra_note:
                    display_item_name += f" ({extra_note.strip()})"
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô finished
                finished_statuses = ["completed", "finished", "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"]
                status_display = "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" if status in finished_statuses else "‡∏£‡∏≠‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£"
                row = [
                    str(order_id),
                    formatted_date,
                    display_item_name,
                    str(quantity),
                    str(int(unit_price)) if unit_price else "",
                    str(int(item_total)) if item_total else "",
                    special_request,
                    customer_note,
                    status_display
                ]
                
                formatted_data.append(row)
                
                # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
                row_index = len(formatted_data) - 1
                row_formats[row_index] = {
                    'type': 'data',
                    'order_id': order_id,
                    'color': order_colors[order_id]['light']
                }
                
                total_quantity += quantity
                total_amount += item_total
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
            summary_row = [
                f'‡∏™‡∏£‡∏∏‡∏õ Order {order_id}',
                '',
                f'‡∏£‡∏ß‡∏° {len(items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£',
                str(total_quantity),
                '',
                str(int(total_amount)),
                '',
                '',
                ''
            ]
            formatted_data.append(summary_row)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ
            row_index = len(formatted_data) - 1
            row_formats[row_index] = {
                'type': 'summary',
                'order_id': order_id,
                'color': order_colors[order_id]['dark']
            }
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        print("üìù ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets...")
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        service.spreadsheets().values().clear(
            spreadsheetId=spreadsheet_id,
            range='Orders!A:Z'
        ).execute()
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        service.spreadsheets().values().update(
            spreadsheetId=spreadsheet_id,
            range='Orders!A1',
            valueInputOption='USER_ENTERED',
            body={'values': formatted_data}
        ).execute()
        
        print("üé® ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Batch Requests...")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á batch requests ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö
        requests = []
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Header
        requests.append({
            'repeatCell': {
                'range': {
                    'sheetId': 0,
                    'startRowIndex': 0,
                    'endRowIndex': 1,
                    'startColumnIndex': 0,
                    'endColumnIndex': 9
                },
                'cell': {
                    'userEnteredFormat': {
                        'backgroundColor': {'red': 0.2, 'green': 0.4, 'blue': 0.8},
                        'textFormat': {
                            'foregroundColor': {'red': 1.0, 'green': 1.0, 'blue': 1.0},
                            'bold': True,
                            'fontSize': 12
                        },
                        'horizontalAlignment': 'CENTER',
                        'verticalAlignment': 'MIDDLE'
                    }
                },
                'fields': 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment,verticalAlignment)'
            }
        })
        
        # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for row_index, format_info in row_formats.items():
            actual_row = row_index + 1  # +1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ Google Sheets ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 1
            
            if format_info['type'] == 'data':
                # ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': actual_row - 1,
                            'endRowIndex': actual_row,
                            'startColumnIndex': 0,
                            'endColumnIndex': 9
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'backgroundColor': format_info['color'],
                                'textFormat': {
                                    'bold': False,
                                    'fontSize': 10
                                },
                                'horizontalAlignment': 'LEFT',
                                'verticalAlignment': 'MIDDLE'
                            }
                        },
                        'fields': 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment,verticalAlignment)'
                    }
                })
                
                # ‡∏à‡∏±‡∏î‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ä‡∏¥‡∏î‡∏Ç‡∏ß‡∏≤ (‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå D, E, F)
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': actual_row - 1,
                            'endRowIndex': actual_row,
                            'startColumnIndex': 3,
                            'endColumnIndex': 6
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'horizontalAlignment': 'RIGHT'
                            }
                        },
                        'fields': 'userEnteredFormat(horizontalAlignment)'
                    }
                })
                
            elif format_info['type'] == 'summary':
                # ‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': actual_row - 1,
                            'endRowIndex': actual_row,
                            'startColumnIndex': 0,
                            'endColumnIndex': 9
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'backgroundColor': format_info['color'],
                                'textFormat': {
                                    'foregroundColor': {'red': 1.0, 'green': 1.0, 'blue': 1.0},
                                    'bold': True,
                                    'fontSize': 11
                                },
                                'horizontalAlignment': 'CENTER',
                                'verticalAlignment': 'MIDDLE'
                            }
                        },
                        'fields': 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment,verticalAlignment)'
                    }
                })
        
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        requests.append({
            'autoResizeDimensions': {
                'dimensions': {
                    'sheetId': 0,
                    'dimension': 'COLUMNS',
                    'startIndex': 0,
                    'endIndex': 9
                }
            }
        })
        
        # ‡∏™‡πà‡∏á batch requests
        if requests:
            body = {'requests': requests}
            service.spreadsheets().batchUpdate(
                spreadsheetId=spreadsheet_id,
                body=body
            ).execute()
        
        print(f"‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô Orders: {len(orders_grouped)}")
        print(f"üìù ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {len(all_items)}")
        print(f"üîó ‡∏•‡∏¥‡∏á‡∏Å‡πå: https://docs.google.com/spreadsheets/d/{spreadsheet_id}/edit")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        return False

if __name__ == "__main__":
    print("üé® ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets ‡∏ï‡∏≤‡∏°‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏ö‡∏°‡∏≤ (Optimized)")
    print("=" * 70)
    
    success = format_sheets_optimized()
    
    if success:
        print("\nüéâ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô! Google Sheets ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß")
    else:
        print("\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö")