import gspread
from google.oauth2.service_account import Credentials
from googleapiclient.discovery import build
import json
import os
from datetime import datetime
import pickle

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets
with open('google_sheets_config.json', 'r', encoding='utf-8') as f:
    config = json.load(f)

# ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets API
SCOPES = ['https://www.googleapis.com/auth/spreadsheets', 'https://www.googleapis.com/auth/drive']
creds = Credentials.from_service_account_file('credentials.json', scopes=SCOPES)
gc = gspread.authorize(creds)
service = build('sheets', 'v4', credentials=creds)

def create_backup_directory():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
    backup_dir = 'sheets_backups'
    if not os.path.exists(backup_dir):
        os.makedirs(backup_dir)
        print(f"‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå {backup_dir} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß")
    return backup_dir

def backup_sheet_formatting():
    """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á Google Sheets"""
    try:
        # ‡πÄ‡∏õ‡∏¥‡∏î Google Sheets
        spreadsheet = gc.open_by_key(config['spreadsheet_id'])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á
        backup_dir = create_backup_directory()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        backup_filename = f"sheets_format_backup_{timestamp}.json"
        backup_path = os.path.join(backup_dir, backup_filename)
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
        backup_data = {
            'timestamp': timestamp,
            'spreadsheet_id': config['spreadsheet_id'],
            'spreadsheet_title': spreadsheet.title,
            'worksheets': []
        }
        
        print(f"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Google Sheets: {spreadsheet.title}")
        
        # ‡∏ß‡∏ô‡∏•‡∏π‡∏õ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô
        for worksheet in spreadsheet.worksheets():
            print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô: {worksheet.title}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô
            sheet_data = service.spreadsheets().get(
                spreadsheetId=config['spreadsheet_id'],
                ranges=[worksheet.title],
                includeGridData=True
            ).execute()
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô
            all_values = worksheet.get_all_values()
            
            worksheet_backup = {
                'title': worksheet.title,
                'id': worksheet.id,
                'index': worksheet.index,
                'row_count': worksheet.row_count,
                'col_count': worksheet.col_count,
                'values': all_values,
                'sheet_properties': sheet_data['sheets'][0]['properties'],
                'grid_data': sheet_data['sheets'][0].get('data', [])
            }
            
            backup_data['worksheets'].append(worksheet_backup)
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏ü‡∏•‡πå JSON
        with open(backup_path, 'w', encoding='utf-8') as f:
            json.dump(backup_data, f, ensure_ascii=False, indent=2)
        
        print(f"\n‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        print(f"üìÅ ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á: {backup_path}")
        print(f"üìä ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏£‡∏≠‡∏á: {len(backup_data['worksheets'])} ‡πÅ‡∏ú‡πà‡∏ô")
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡∏¢‡πà‡∏≠ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç)
        summary_backup = {
            'timestamp': timestamp,
            'spreadsheet_id': config['spreadsheet_id'],
            'spreadsheet_title': spreadsheet.title,
            'worksheets_summary': []
        }
        
        for ws in backup_data['worksheets']:
            summary_backup['worksheets_summary'].append({
                'title': ws['title'],
                'id': ws['id'],
                'row_count': ws['row_count'],
                'col_count': ws['col_count'],
                'has_data': len(ws['values']) > 0
            })
        
        summary_filename = f"sheets_summary_{timestamp}.json"
        summary_path = os.path.join(backup_dir, summary_filename)
        
        with open(summary_path, 'w', encoding='utf-8') as f:
            json.dump(summary_backup, f, ensure_ascii=False, indent=2)
        
        print(f"üìã ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏£‡∏∏‡∏õ: {summary_path}")
        
        return backup_path, summary_path
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return None, None

def list_backups():
    """‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    backup_dir = 'sheets_backups'
    if not os.path.exists(backup_dir):
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return []
    
    backup_files = []
    for filename in os.listdir(backup_dir):
        if filename.startswith('sheets_format_backup_') and filename.endswith('.json'):
            filepath = os.path.join(backup_dir, filename)
            file_stat = os.stat(filepath)
            backup_files.append({
                'filename': filename,
                'filepath': filepath,
                'size': file_stat.st_size,
                'modified': datetime.fromtimestamp(file_stat.st_mtime)
            })
    
    # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    backup_files.sort(key=lambda x: x['modified'], reverse=True)
    
    print("\nüìã ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
    print("-" * 80)
    for i, backup in enumerate(backup_files, 1):
        size_mb = backup['size'] / (1024 * 1024)
        print(f"{i}. {backup['filename']}")
        print(f"   üìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {backup['modified'].strftime('%d/%m/%Y %H:%M:%S')}")
        print(f"   üì¶ ‡∏Ç‡∏ô‡∏≤‡∏î: {size_mb:.2f} MB")
        print()
    
    return backup_files

def restore_from_backup(backup_filepath):
    """‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á"""
    try:
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å: {backup_filepath}")
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
        with open(backup_filepath, 'r', encoding='utf-8') as f:
            backup_data = json.load(f)
        
        # ‡πÄ‡∏õ‡∏¥‡∏î Google Sheets
        spreadsheet = gc.open_by_key(config['spreadsheet_id'])
        
        print(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: {backup_data['spreadsheet_title']}")
        print(f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏£‡∏≠‡∏á: {backup_data['timestamp']}")
        
        # ‡∏•‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏£‡∏Å)
        existing_worksheets = spreadsheet.worksheets()
        for ws in existing_worksheets[1:]:  # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏£‡∏Å‡πÑ‡∏ß‡πâ
            try:
                spreadsheet.del_worksheet(ws)
                print(f"‡∏•‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô: {ws.title}")
            except Exception as e:
                print(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô {ws.title}: {e}")
        
        # ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á
        for i, ws_data in enumerate(backup_data['worksheets']):
            try:
                if i == 0:
                    # ‡πÉ‡∏ä‡πâ‡πÅ‡∏ú‡πà‡∏ô‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
                    worksheet = existing_worksheets[0]
                    # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô
                    worksheet.update_title(ws_data['title'])
                else:
                    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà
                    worksheet = spreadsheet.add_worksheet(
                        title=ws_data['title'],
                        rows=ws_data['row_count'],
                        cols=ws_data['col_count']
                    )
                
                # ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô
                if ws_data['values']:
                    # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
                    worksheet.clear()
                    
                    # ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
                    if ws_data['values']:
                        worksheet.update('A1', ws_data['values'])
                
                print(f"‚úÖ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô: {ws_data['title']}")
                
            except Exception as e:
                print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô {ws_data['title']}: {e}")
        
        print(f"\nüéâ ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
        print(f"üîó URL: https://docs.google.com/spreadsheets/d/{config['spreadsheet_id']}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
        return False

def interactive_restore():
    """‡πÇ‡∏´‡∏°‡∏î‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö‡πÇ‡∏ï‡πâ‡∏ï‡∏≠‡∏ö"""
    backup_files = list_backups()
    
    if not backup_files:
        print("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return
    
    print("\nüîÑ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô:")
    
    try:
        choice = input("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç (‡∏´‡∏£‡∏∑‡∏≠ 'q' ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å): ").strip()
        
        if choice.lower() == 'q':
            print("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            return
        
        choice_num = int(choice)
        if 1 <= choice_num <= len(backup_files):
            selected_backup = backup_files[choice_num - 1]
            
            print(f"\n‚ö†Ô∏è  ‡∏Ñ‡∏≥‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô: ‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏à‡∏∞‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÉ‡∏ô Google Sheets")
            confirm = input("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà? (y/N): ").strip().lower()
            
            if confirm == 'y':
                restore_from_backup(selected_backup['filepath'])
            else:
                print("‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        else:
            print("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            
    except ValueError:
        print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
    except KeyboardInterrupt:
        print("\n‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")

if __name__ == "__main__":
    import sys
    
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == 'backup':
            backup_sheet_formatting()
        elif command == 'list':
            list_backups()
        elif command == 'restore':
            interactive_restore()
        else:
            print("‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            print("‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô:")
            print("  python backup_sheets_format.py backup   - ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
            print("  python backup_sheets_format.py list     - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏£‡∏≠‡∏á")
            print("  python backup_sheets_format.py restore  - ‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
    else:
        # ‡∏£‡∏±‡∏ô‡πÇ‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
        backup_sheet_formatting()