#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß
"""

import sys
import os
import json
import sqlite3
from datetime import datetime, timedelta
from typing import Dict, List, Any

try:
    from google.oauth2.service_account import Credentials
    from googleapiclient.discovery import build
    from googleapiclient.errors import HttpError
except ImportError as e:
    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ import Google API libraries: {e}")
    print("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏±‡∏ô: pip install google-api-python-client google-auth")
    sys.exit(1)

class SummaryDataUpdater:
    def __init__(self):
        self.service = None
        self.spreadsheet_id = None
        self.credentials_file = 'credentials.json'
        self.db_path = 'pos_database.db'
        
        # ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.load_config()
        
        # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Google Sheets service
        self.initialize_service()
    
    def load_config(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå config"""
        config_file = 'google_sheets_config.json'
        if os.path.exists(config_file):
            try:
                with open(config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    self.spreadsheet_id = config.get('spreadsheet_id')
                    print(f"üìã ‡πÇ‡∏´‡∏•‡∏î config ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {self.spreadsheet_id}")
            except Exception as e:
                print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î config: {e}")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå google_sheets_config.json")
            sys.exit(1)
    
    def initialize_service(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Google Sheets service"""
        try:
            if not os.path.exists(self.credentials_file):
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå {self.credentials_file}")
                return False
            
            credentials = Credentials.from_service_account_file(
                self.credentials_file,
                scopes=['https://www.googleapis.com/auth/spreadsheets']
            )
            
            self.service = build('sheets', 'v4', credentials=credentials)
            print("‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets API ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets API: {e}")
            return False
    
    def clear_sheet_data(self, sheet_name: str, start_row: int = 2):
        """‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÑ‡∏ß‡πâ)"""
        try:
            # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà 2 (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÑ‡∏ß‡πâ)
            range_name = f"{sheet_name}!A{start_row}:Z1000"
            
            self.service.spreadsheets().values().clear(
                spreadsheetId=self.spreadsheet_id,
                range=range_name
            ).execute()
            
            print(f"üßπ ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô {sheet_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {sheet_name}: {e}")
            return False
    
    def write_header_to_sheet(self, sheet_name: str):
        """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô header ‡∏•‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô"""
        try:
            headers = [
                ['‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà', '‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ö‡∏¥‡∏•']
            ]
            range_name = f"{sheet_name}!A1"
            self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',
                body={'values': headers}
            ).execute()
            print(f"‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô header ‡∏•‡∏á {sheet_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            return True
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô header: {e}")
            return False
    
    def write_to_sheet(self, sheet_name: str, data: List[List], range_start: str = 'A2'):
        """‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô"""
        try:
            if not data:
                print(f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {sheet_name}")
                return False
            
            range_name = f"{sheet_name}!{range_start}"
            
            body = {
                'values': data
            }
            
            result = self.service.spreadsheets().values().update(
                spreadsheetId=self.spreadsheet_id,
                range=range_name,
                valueInputOption='RAW',
                body=body
            ).execute()
            
            print(f"‚úÖ ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {sheet_name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ({len(data)} ‡πÅ‡∏ñ‡∏ß)")
            return True
            
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á {sheet_name}: {e}")
            return False
    
    def get_daily_sales_data(self) -> List[List]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏ó‡∏∏‡∏Å‡∏ß‡∏±‡∏ô ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            daily_data = []

            # ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô rejected)
            cursor.execute("""
                SELECT DISTINCT DATE(o.created_at)
                FROM orders o
                WHERE o.status != 'rejected'
                ORDER BY DATE(o.created_at) ASC
            """)
            date_rows = cursor.fetchall()
            date_list = [row[0] for row in date_rows]

            current_month = None
            month_sales_sum = 0
            month_orders_sum = 0
            monthly_rows = []
            all_data = []

            for date_str in date_list:
                if not date_str:
                    continue
                # ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏±‡πâ‡∏ô
                cursor.execute("""
                    SELECT 
                        COUNT(DISTINCT o.order_id) as order_count,
                        COALESCE(SUM(o.total_amount), 0) as total_sales,
                        COALESCE(AVG(o.total_amount), 0) as avg_sales
                    FROM orders o
                    WHERE DATE(o.created_at) = ? AND o.status != 'rejected'
                """, (date_str,))
                result = cursor.fetchone()
                order_count = result[0] if result[0] else 0
                total_sales = result[1] if result[1] else 0
                avg_sales = result[2] if result[2] else 0
                row = [
                    date_str,
                    f"{total_sales:,.0f}" if total_sales > 0 else "0",
                    str(order_count)
                ]
                # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
                date_obj = datetime.strptime(date_str, "%Y-%m-%d")
                month_key = date_obj.strftime("%m/%Y")
                if current_month is None:
                    current_month = month_key
                if month_key != current_month:
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
                    summary_row = [
                        f"‡∏£‡∏ß‡∏° {current_month}",
                        f"{month_sales_sum:,.0f}",
                        str(month_orders_sum)
                    ]
                    all_data.extend(monthly_rows)
                    all_data.append(summary_row)
                    # reset
                    monthly_rows = []
                    month_sales_sum = 0
                    month_orders_sum = 0
                    current_month = month_key
                monthly_rows.append(row)
                # ‡∏™‡∏∞‡∏™‡∏°‡∏¢‡∏≠‡∏î
                sales_str = row[1].replace(',', '')
                month_sales_sum += float(sales_str) if sales_str != '0' else 0
                month_orders_sum += int(row[2])
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢
            if monthly_rows:
                summary_row = [
                    f"‡∏£‡∏ß‡∏° {current_month}",
                    f"{month_sales_sum:,.0f}",
                    str(month_orders_sum)
                ]
                all_data.extend(monthly_rows)
                all_data.append(summary_row)
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if all_data:
                total_sales_sum = 0
                total_orders_sum = 0
                for row in all_data:
                    if row[0].startswith('‡∏£‡∏ß‡∏° '):
                        continue
                    sales_str = row[1].replace(',', '')
                    total_sales_sum += float(sales_str) if sales_str != '0' else 0
                    total_orders_sum += int(row[2])
                summary_row = [
                    '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                    f"{total_sales_sum:,.0f}",
                    str(total_orders_sum)
                ]
                all_data.append(summary_row)
            conn.close()
            return all_data
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô: {e}")
            return []
    
    def get_monthly_sales_data(self) -> List[List]:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏à‡∏£‡∏¥‡∏á‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            monthly_data = []
            # ‡∏î‡∏∂‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏õ‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô rejected)
            cursor.execute("""
                SELECT DISTINCT strftime('%m', o.created_at) as m, strftime('%Y', o.created_at) as y
                FROM orders o
                WHERE o.status != 'rejected'
                ORDER BY y ASC, m ASC
            """)
            month_rows = cursor.fetchall()
            total_sales_sum = 0
            total_orders_sum = 0
            for m, y in month_rows:
                month_str = f"{m}/{y}"
                # ‡∏î‡∏∂‡∏á‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
                cursor.execute("""
                    SELECT 
                        COUNT(DISTINCT o.order_id) as order_count,
                        COALESCE(SUM(o.total_amount), 0) as total_sales,
                        COALESCE(AVG(o.total_amount), 0) as avg_sales
                    FROM orders o
                    WHERE strftime('%m', o.created_at) = ? 
                    AND strftime('%Y', o.created_at) = ? 
                    AND o.status != 'rejected'
                """, (m, y))
                result = cursor.fetchone()
                order_count = result[0] if result[0] else 0
                total_sales = result[1] if result[1] else 0
                avg_sales = result[2] if result[2] else 0
                total_sales_sum += total_sales
                total_orders_sum += order_count
                # ‡∏î‡∏∂‡∏á‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡∏≤‡∏¢‡∏î‡∏µ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏±‡πâ‡∏ô
                cursor.execute("""
                    SELECT mi.name, SUM(oi.quantity) as total_qty
                    FROM order_items oi
                    JOIN orders o ON oi.order_id = o.order_id
                    JOIN menu_items mi ON oi.item_id = mi.item_id
                    WHERE strftime('%m', o.created_at) = ? 
                    AND strftime('%Y', o.created_at) = ? 
                    AND o.status != 'rejected'
                    GROUP BY mi.item_id, mi.name
                    ORDER BY total_qty DESC
                    LIMIT 1
                """, (m, y))
                best_item_result = cursor.fetchone()
                best_item = best_item_result[0] if best_item_result else "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
                row = [
                    month_str,
                    f"{total_sales:,.0f}" if total_sales > 0 else "0",
                    str(order_count),
                    f"{avg_sales:,.0f}" if avg_sales > 0 else "0",
                    best_item
                ]
                monthly_data.append(row)
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
            if monthly_data:
                summary_row = [
                    '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
                    f"{total_sales_sum:,.0f}",
                    str(total_orders_sum),
                    '',
                    ''
                ]
                monthly_data.append(summary_row)
            conn.close()
            return monthly_data
        except Exception as e:
            print(f"‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {e}")
            return []
    
    def format_daily_summary_sheet(self):
        """‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô Daily_Summary ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÄ‡∏ô‡πâ‡∏ô‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ, ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î, ‡∏™‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á)"""
        import re
        try:
            requests = []
            sheet_name = 'Daily_Summary'
            result = self.service.spreadsheets().values().get(
                spreadsheetId=self.spreadsheet_id,
                range=f'{sheet_name}!A1:C1000'
            ).execute()
            values = result.get('values', [])
            summary_month_rows = []
            summary_total_row = None
            
            # Debug: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å Google Sheets
            print("üîç Debug: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets:")
            for idx, row in enumerate(values[:20]):  # ‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏Ñ‡πà 20 ‡πÅ‡∏ñ‡∏ß‡πÅ‡∏£‡∏Å
                if row:
                    print(f"‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {idx+1}: '{row[0].strip()}' (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß: {len(row[0].strip())})")
                    if re.match(r'^‡∏£‡∏ß‡∏°\s+\d{2}/\d{4}$', row[0].strip()):
                        print(f"  ‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö regex pattern (‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)")
                        summary_month_rows.append(idx)
                    elif row[0].strip() == '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î':
                        print(f"  ‚úÖ ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
                        summary_total_row = idx
                    else:
                        print(f"  ‚ùå ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö pattern ‡πÉ‡∏î‡πÜ")
            
            print(f"üéØ ‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {summary_month_rows}")
            print(f"üéØ ‡∏û‡∏ö‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {summary_total_row}")
            
            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏´‡∏±‡∏ß‡∏ï‡∏≤‡∏£‡∏≤‡∏á
            requests.append({
                'repeatCell': {
                    'range': {
                        'sheetId': 0,
                        'startRowIndex': 0,
                        'endRowIndex': 1
                    },
                    'cell': {
                        'userEnteredFormat': {
                            'backgroundColor': {'red': 0.2, 'green': 0.6, 'blue': 1},
                            'horizontalAlignment': 'CENTER',
                            'textFormat': {'bold': True, 'foregroundColor': {'red': 1, 'green': 1, 'blue': 1}}
                        }
                    },
                    'fields': 'userEnteredFormat(backgroundColor,textFormat,horizontalAlignment)'
                }
            })
            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á)
            for idx in summary_month_rows:
                print(f"üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {idx+1} ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á")
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': idx,
                            'endRowIndex': idx+1
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'backgroundColor': {'red': 1, 'green': 0.92, 'blue': 0.6},
                                'textFormat': {'bold': True}
                            }
                        },
                        'fields': 'userEnteredFormat(backgroundColor,textFormat)'
                    }
                })
            # ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô)
            if summary_total_row is not None:
                print(f"üé® ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {summary_total_row+1} ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô")
                requests.append({
                    'repeatCell': {
                        'range': {
                            'sheetId': 0,
                            'startRowIndex': summary_total_row,
                            'endRowIndex': summary_total_row+1
                        },
                        'cell': {
                            'userEnteredFormat': {
                                'backgroundColor': {'red': 0.8, 'green': 0.9, 'blue': 1},
                                'textFormat': {'bold': True}
                            }
                        },
                        'fields': 'userEnteredFormat(backgroundColor,textFormat)'
                    }
                })
            body = {'requests': requests}
            self.service.spreadsheets().batchUpdate(
                spreadsheetId=self.spreadsheet_id,
                body=body
            ).execute()
            # ‡πÄ‡∏ß‡πâ‡∏ô‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ñ‡∏ß‡∏™‡∏£‡∏∏‡∏õ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î) ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î format ‡∏™‡∏µ
            for idx in reversed(summary_month_rows):
                if idx+1 < len(values) and not (values[idx+1][0].strip() == '‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î'):
                    print(f"üìù ‡πÅ‡∏ó‡∏£‡∏Å‡πÅ‡∏ñ‡∏ß‡∏ß‡πà‡∏≤‡∏á‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏ñ‡∏ß‡∏ó‡∏µ‡πà {idx+1}")
                    self.service.spreadsheets().batchUpdate(
                        spreadsheetId=self.spreadsheet_id,
                        body={
                            'requests': [{
                                'insertDimension': {
                                    'range': {
                                        'sheetId': 0,
                                        'dimension': 'ROWS',
                                        'startIndex': idx+1,
                                        'endIndex': idx+2
                                    },
                                    'inheritFromBefore': False
                                }
                            }]
                        }
                    ).execute()
            print('‚úÖ ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Daily_Summary ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢')
        except Exception as e:
            print(f'‚ùå ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Daily_Summary: {e}')
    
    def update_daily_summary(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÉ‡∏ô Daily_Summary"""
        self.clear_sheet_data('Daily_Summary', start_row=2)
        self.write_header_to_sheet('Daily_Summary')
        daily_data = self.get_daily_sales_data()
        self.write_to_sheet('Daily_Summary', daily_data, range_start='A2')
        self.format_daily_summary_sheet()
    
    def update_monthly_summary(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...")
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÑ‡∏ß‡πâ)
        if not self.clear_sheet_data('Daily_Summary', 2):
            return False
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        daily_data = self.get_daily_sales_data()
        if not daily_data:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô")
            return False
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        return self.write_to_sheet('Daily_Summary', daily_data)
    
    def update_monthly_summary(self):
        """‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"""
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô...")
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤ (‡πÄ‡∏Å‡πá‡∏ö‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß‡πÑ‡∏ß‡πâ)
        if not self.clear_sheet_data('Monthly_Summary', 2):
            return False
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        monthly_data = self.get_monthly_sales_data()
        if not monthly_data:
            print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
            return False
        
        # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
        return self.write_to_sheet('Monthly_Summary', monthly_data)
    
    def run(self):
        """‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î...")
        
        success_count = 0
        total_updates = 2
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô
        if self.update_daily_summary():
            success_count += 1
        
        # ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
        if self.update_monthly_summary():
            success_count += 1
        
        # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•
        print(f"\nüìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï:")
        print(f"‚úÖ ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {success_count}/{total_updates} ‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô")
        
        if success_count == total_updates:
            print("üéâ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î!")
            return True
        else:
            print("‚ö†Ô∏è ‡∏°‡∏µ‡∏ö‡∏≤‡∏á‡πÅ‡∏ú‡πà‡∏ô‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÑ‡∏î‡πâ")
            return False

def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå"""
    try:
        print("üéØ ‡∏™‡∏Ñ‡∏£‡∏¥‡∏õ‡∏ï‡πå‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô")
        print("=" * 60)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á SummaryDataUpdater
        updater = SummaryDataUpdater()
        
        # ‡∏£‡∏±‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£
        success = updater.run()
        
        if success:
            print("\nüéâ ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
            print("üìù ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß")
        else:
            print("\n‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï")
            print("üîß ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        
        print("=" * 60)
        
    except KeyboardInterrupt:
        print("\n‚èπÔ∏è ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    except Exception as e:
        print(f"\nüí• ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏≤‡∏î‡∏Ñ‡∏¥‡∏î: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main()