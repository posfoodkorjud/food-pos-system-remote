import sqlite3
import os
import shutil
from datetime import datetime

def backup_database():
    """‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    source_db = 'A_FOOD_POS/pos_database.db'
    timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
    backup_db = f'A_FOOD_POS/pos_database_backup_{timestamp}.db'
    
    if os.path.exists(source_db):
        shutil.copy2(source_db, backup_db)
        print(f"‚úÖ ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {backup_db}")
        return backup_db
    else:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {source_db}")
        return None

def create_new_database_structure():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£"""
    new_db_path = 'A_FOOD_POS/FOOD_POS/backend/pos_database.db'
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå backend ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ
    os.makedirs(os.path.dirname(new_db_path), exist_ok=True)
    
    # ‡∏•‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏´‡∏≤‡∏Å‡∏°‡∏µ
    if os.path.exists(new_db_path):
        os.remove(new_db_path)
    
    conn = sqlite3.connect(new_db_path)
    cursor = conn.cursor()
    
    print("üîß ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà...")
    
    # 1. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á tables (‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏ï‡πä‡∏∞)
    cursor.execute('''
    CREATE TABLE tables (
        table_id INTEGER PRIMARY KEY AUTOINCREMENT,
        table_name TEXT NOT NULL,
        status TEXT DEFAULT 'available',
        session_id TEXT,
        checkout_at TIMESTAMP,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 2. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á menu_categories (‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π)
    cursor.execute('''
    CREATE TABLE menu_categories (
        category_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        description TEXT,
        sort_order INTEGER DEFAULT 0,
        is_active BOOLEAN DEFAULT 1,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 3. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á menu_items (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π)
    cursor.execute('''
    CREATE TABLE menu_items (
        item_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        price REAL NOT NULL,
        category_id INTEGER,
        description TEXT,
        food_option_type TEXT,
        image_url TEXT,
        is_available BOOLEAN DEFAULT 1,
        preparation_time INTEGER DEFAULT 15,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (category_id) REFERENCES menu_categories(category_id)
    )
    ''')
    
    # 4. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á orders (‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    cursor.execute('''
    CREATE TABLE orders (
        order_id INTEGER PRIMARY KEY AUTOINCREMENT,
        table_id INTEGER,
        status TEXT DEFAULT 'active',
        total_amount REAL DEFAULT 0,
        bill_status TEXT DEFAULT 'unpaid',
        session_id TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        completed_at TIMESTAMP,
        FOREIGN KEY (table_id) REFERENCES tables(table_id)
    )
    ''')
    
    # 5. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á order_items (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠)
    cursor.execute('''
    CREATE TABLE order_items (
        order_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER,
        item_id INTEGER,
        quantity INTEGER NOT NULL,
        unit_price REAL NOT NULL,
        total_price REAL NOT NULL,
        customer_request TEXT,
        status TEXT DEFAULT 'pending',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (order_id) REFERENCES orders(order_id),
        FOREIGN KEY (item_id) REFERENCES menu_items(item_id)
    )
    ''')
    
    # 6. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á order_history (‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠)
    cursor.execute('''
    CREATE TABLE order_history (
        order_id INTEGER PRIMARY KEY,
        table_id INTEGER,
        total_amount REAL,
        completed_at TIMESTAMP,
        payment_method TEXT,
        session_id TEXT,
        created_at TIMESTAMP,
        FOREIGN KEY (table_id) REFERENCES tables(table_id)
    )
    ''')
    
    # 7. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á order_history_items (‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥)
    cursor.execute('''
    CREATE TABLE order_history_items (
        history_item_id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER,
        menu_item_id INTEGER,
        quantity INTEGER,
        price REAL,
        customer_request TEXT,
        FOREIGN KEY (order_id) REFERENCES order_history(order_id),
        FOREIGN KEY (menu_item_id) REFERENCES menu_items(item_id)
    )
    ''')
    
    # 8. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á receipts (‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à)
    cursor.execute('''
    CREATE TABLE receipts (
        receipt_id INTEGER PRIMARY KEY AUTOINCREMENT,
        order_id INTEGER,
        total_amount REAL,
        payment_method TEXT,
        is_paid BOOLEAN DEFAULT 0,
        promptpay_qr TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        paid_at TIMESTAMP,
        FOREIGN KEY (order_id) REFERENCES order_history(order_id)
    )
    ''')
    
    # 9. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á system_config (‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö)
    cursor.execute('''
    CREATE TABLE system_config (
        config_key TEXT PRIMARY KEY,
        config_value TEXT,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 10. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á option_types (‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    cursor.execute('''
    CREATE TABLE option_types (
        option_type_id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT NOT NULL,
        key TEXT UNIQUE NOT NULL,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    ''')
    
    # 11. ‡∏ï‡∏≤‡∏£‡∏≤‡∏á option_values (‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    cursor.execute('''
    CREATE TABLE option_values (
        option_value_id INTEGER PRIMARY KEY AUTOINCREMENT,
        option_type INTEGER,
        name TEXT NOT NULL,
        additional_price REAL DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (option_type) REFERENCES option_types(option_type_id)
    )
    ''')
    
    conn.commit()
    conn.close()
    
    print(f"‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢: {new_db_path}")
    return new_db_path

def insert_initial_data(new_db_path):
    """‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô"""
    conn = sqlite3.connect(new_db_path)
    cursor = conn.cursor()
    
    print("üìù ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô...")
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÇ‡∏ï‡πä‡∏∞ 10 ‡πÇ‡∏ï‡πä‡∏∞
    for i in range(1, 11):
        cursor.execute('''
        INSERT INTO tables (table_name, status) 
        VALUES (?, 'available')
        ''', (f'‡πÇ‡∏ï‡πä‡∏∞ {i}',))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏°‡∏ô‡∏π 4 ‡∏´‡∏°‡∏ß‡∏î
    categories = [
        ('‡πÄ‡∏°‡∏ô‡∏π‡∏Ç‡πâ‡∏≤‡∏ß', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏à‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≤‡∏ß‡∏£‡∏≤‡∏î', 1),
        ('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', '‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°‡∏ó‡∏∏‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó', 2),
        ('‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô', '‡∏Ç‡∏ô‡∏°‡∏´‡∏ß‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ç‡∏≠‡∏á‡∏´‡∏ß‡∏≤‡∏ô', 3),
        ('‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á', '‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ï‡∏≤‡∏°‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ', 4)
    ]
    
    for name, desc, sort_order in categories:
        cursor.execute('''
        INSERT INTO menu_categories (name, description, sort_order) 
        VALUES (?, ?, ?)
        ''', (name, desc, sort_order))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    option_types = [
        ('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ú‡πá‡∏î', 'spice_level'),
        ('‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô', 'sweet_level')
    ]
    
    for name, key in option_types:
        cursor.execute('''
        INSERT INTO option_types (name, key) 
        VALUES (?, ?)
        ''', (name, key))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    option_values = [
        (1, '‡πÑ‡∏°‡πà‡πÄ‡∏ú‡πá‡∏î', 0),
        (1, '‡πÄ‡∏ú‡πá‡∏î‡∏ô‡πâ‡∏≠‡∏¢', 0),
        (1, '‡πÄ‡∏ú‡πá‡∏î‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', 0),
        (1, '‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å', 0),
        (1, '‡πÄ‡∏ú‡πá‡∏î‡∏°‡∏≤‡∏Å‡∏û‡∏¥‡πÄ‡∏®‡∏©', 5),
        (2, '‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô', 0),
        (2, '‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢', 0),
        (2, '‡∏´‡∏ß‡∏≤‡∏ô‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á', 0),
        (2, '‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å', 0),
        (2, '‡∏´‡∏ß‡∏≤‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©', 5)
    ]
    
    for option_type, name, price in option_values:
        cursor.execute('''
        INSERT INTO option_values (option_type, name, additional_price) 
        VALUES (?, ?, ?)
        ''', (option_type, name, price))
    
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
    cursor.execute('''
    INSERT INTO system_config (config_key, config_value) 
    VALUES ('restaurant_name', '‡∏£‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£ KORJUD')
    ''')
    
    conn.commit()
    conn.close()
    
    print("‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")

def migrate_menu_data(old_db_path, new_db_path):
    """‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤"""
    if not os.path.exists(old_db_path):
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤: {old_db_path}")
        return
    
    print("üîÑ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤...")
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÉ‡∏´‡∏°‡πà
    old_conn = sqlite3.connect(old_db_path)
    new_conn = sqlite3.connect(new_db_path)
    
    old_cursor = old_conn.cursor()
    new_cursor = new_conn.cursor()
    
    try:
        # ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π (‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 77 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        old_cursor.execute('''
        SELECT name, price, category_id, description, food_option_type, 
               image_url, is_available, preparation_time
        FROM menu_items 
        WHERE is_available = 1
        LIMIT 77
        ''')
        
        menu_items = old_cursor.fetchall()
        
        for item in menu_items:
            # ‡πÅ‡∏°‡∏õ‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà (‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)
            category_id = min(item[2] if item[2] else 1, 4)
            
            new_cursor.execute('''
            INSERT INTO menu_items (name, price, category_id, description, 
                                  food_option_type, image_url, is_available, preparation_time)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (item[0], item[1], category_id, item[3], item[4], item[5], item[6], item[7]))
        
        print(f"‚úÖ ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π {len(menu_items)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}")
    
    finally:
        new_conn.commit()
        old_conn.close()
        new_conn.close()

def main():
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...")
    
    # 1. ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    backup_path = backup_database()
    
    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà
    new_db_path = create_new_database_structure()
    
    # 3. ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
    insert_initial_data(new_db_path)
    
    # 4. ‡∏¢‡πâ‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏ô‡∏π‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    if backup_path:
        migrate_menu_data('A_FOOD_POS/pos_database.db', new_db_path)
    
    print("\nüéâ ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô!")
    print(f"üìÅ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà: {new_db_path}")
    print(f"üíæ ‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏£‡∏≠‡∏á: {backup_path}")

if __name__ == "__main__":
    main()